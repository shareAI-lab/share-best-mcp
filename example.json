{
  "repo_name": "rhennigan/MCPServer",
  "analysis_time": "2025-03-27T04:55:02.427292",
  "analysis": {
    "is_mcp_related": true,
    "is_mcp_server": true,
    "repo_type": "Server",
    "description": "使用Wolfram语言实现的模型上下文协议服务器，提供模型的上下文管理和服务。",
    "name": "MCPServer",
    "author": "rhennigan",
    "url": "https://github.com/rhennigan/MCPServer",
    "readme": "\n这是一个使用Wolfram Language实现的MCP服务器，名为MCPServer。该项目旨在提供一个可供大语言模型调用的模型上下文管理服务。使用Wolfram语言的强大计算功能，该服务器可以高效地处理模型的上下文数据，支持各种计算和逻辑判断。这使得集成此服务的系统能够更智能地管理和使用模型上下文，为复杂应用场景提供支持。\n\n潜在应用场景包括：\n1. 数据科学中模型管理：利用服务器提供的上下文协议，可以动态调整模型的参数和状态。\n2. 智能助手系统：通过集成MCPServer，智能助手可以更好地理解用户的需求。\n3. 企业级系统：在企业环境中，为不同应用提供一致的上下文管理，提高系统的集成效率。\n\n随着数据密集型应用的增多，对模型进行上下文管理的需求也在增长，这为MCPServer提供了更多的应用机会。\n  ",
    "github_username": "rhennigan",
    "server_name": "@rhennigan/MCPServer",
    "is_command_guessed": true,
    "server_command": {
      "mcpServers": {
        "rhennigan-MCPServer": {
          "command": "Mathematica",
          "args": [
            "-mcpServer.wl"
          ],
          "env": {}
        }
      }
    },
    "is_stateless": false,
    "stateless_reason": "MCPServer需要维护模型的上下文信息，这是一个有状态的服务，需要根据用户请求动态更新和保持状态。",
    "deployment_mode": "both",
    "deployment_reason": "由于MCPServer涉及到上下文管理和计算负载，它既可以在云端部署以实现扩展性，也可以在本地部署以提高访问速度和减少延迟。",
    "is_easy_install": false,
    "params": [],
    "tags": [
      "MCP",
      "Wolfram Language",
      "上下文管理"
    ],
    "score": 75
  }
}
{
  "repo_name": "go-rod/rod-mcp",
  "analysis_time": "2025-03-27T04:55:03.965345",
  "analysis": {
    "is_mcp_related": true,
    "is_mcp_server": true,
    "repo_type": "Server",
    "description": "Rod-MCP是为大语言模型提供网页自动化操作的服务器，支持点击、截图、保存PDF等功能。",
    "name": "rod-mcp",
    "author": "go-rod",
    "url": "https://github.com/go-rod/rod-mcp",
    "readme": "\n# Rod MCP Server\n\nRod-MCP 是一个基于 Rod 的 MCP（模型上下文协议）服务器，提供一系列网页自动化操作的功能。该服务器的主要目的是允许大型语言模型（LLMs）和其他应用程序通过 MCP 协议与网页交互，实现复杂的自动化任务。主要功能包括：\n\n- **网页点击**：自动点击网页元素，适用于触发页面行为或跳转。\n- **截图**：捕捉网页的当前视图，并保存为图像文件。\n- **保存为PDF**：生成网页的PDF版本，便于存档和共享。\n\n该项目使用 Go 语言编写，具有高效的性能表现和易于集成的特性。用户可以通过调用该 MCP 服务器，实现诸如自动化浏览、数据提取和网页内容交互等复杂任务。\n\n潜在的应用场景包括：\n- 自动化测试：结合 LLMs，进行复杂的网页功能验证。\n- 数据采集：从动态网页中提取信息并进行整理。\n- 页面生成：自动生成基于实时数据更新的PDF报告。\n\nRod-MCP 的设计方便易用，能够快速集成到现有的系统中，使应用程序能够实现更智能的网页操作。\n\n  ",
    "github_username": "go-rod",
    "server_name": "@go-rod/rod-mcp",
    "is_command_guessed": true,
    "server_command": {
      "mcpServers": {
        "go-rod-rod-mcp": {
          "command": "go",
          "args": [
            "run",
            "main.go"
          ],
          "env": {
            "ROD_BROWSER_PATH": "/path/to/chrome-or-edge"
          }
        }
      }
    },
    "is_stateless": true,
    "stateless_reason": "Rod-MCP的每个请求都是独立的操作，不需要保存用户会话或上下文信息，不依赖持久存储，因此是无状态服务。",
    "deployment_mode": "both",
    "deployment_reason": "由于Rod-MCP具有轻量级的部署特性，可以方便地在本地进行快速测试和开发，同时也适合在云端进行大规模的服务部署。",
    "is_easy_install": false,
    "params": [
      "ROD_BROWSER_PATH"
    ],
    "tags": [
      "浏览器自动化",
      "网页交互",
      "MCP服务器"
    ],
    "score": 75
  }
}
{
  "repo_name": "erhwenkuo/mcp-simple-tool",
  "analysis_time": "2025-03-27T04:55:06.566702",
  "analysis": {
    "is_mcp_related": true,
    "is_mcp_server": true,
    "repo_type": "Server",
    "description": "一个简单的MCP服务器，用于获取公开网站内容的工具，方便大语言模型访问资源。",
    "name": "mcp-simple-tool",
    "author": "erhwenkuo",
    "url": "https://github.com/erhwenkuo/mcp-simple-tool",
    "readme": "\n# mcp-simple-tool\n\n`mcp-simple-tool` 是一个使用Python开发的简单MCP服务器，利用MCP协议提供服务，旨在让大语言模型能够请求并访问公开网站上的内容。这个工具主要用于开发者和研究人员在测试和开发过程中，实现与开放网络资源的快速对接。\n\n## 功能特点\n\n- 提供简单易用的API接口，方便对不同网站资源进行访问。\n- 支持多种网站的内容抓取，满足大多数常见的网络数据获取需求。\n- 高度可配置，允许用户根据自身需求调整抓取参数。\n\n## 应用场景\n\n1. **数据收集**：为需要大量网络数据的机器学习模型或数据分析任务提供支持。\n2. **内容聚合**：合并来自不同网站的内容，进行统一处理或展示。\n3. **爬虫代理**：作为网络爬虫的中介层，过滤处理直接从网页抓取的信息。\n\n## 安装与使用\n\n该工具依赖于Python环境，安装和启动过程相对简单。详细的安装步骤和指南可在仓库的Wiki页面中找到。\n\n## 贡献指南\n\n欢迎所有对MCP协议感兴趣的开发者参与项目的改进和功能扩展。我们鼓励通过问题追踪系统报告Bug，并提交Pull Request进行修复。\n\n## 许可证\n\n该项目采用MIT许可证，详情请参阅LICENSE文件。\n\n  ",
    "github_username": "erhwenkuo",
    "server_name": "@erhwenkuo/mcp-simple-tool",
    "is_command_guessed": true,
    "server_command": {
      "mcpServers": {
        "erhwenkuo-mcp-simple-tool": {
          "command": "python",
          "args": [
            "main.py"
          ],
          "env": {}
        }
      }
    },
    "is_stateless": true,
    "stateless_reason": "服务器请求是独立的，不依赖于先前的请求状态，且不需要持久化数据。",
    "deployment_mode": "both",
    "deployment_reason": "工具对资源消耗要求不高，适合本地测试和云端部署两种场景。",
    "is_easy_install": false,
    "params": [],
    "tags": [
      "MCP服务器",
      "网站内容抓取",
      "Python"
    ],
    "score": 70
  }
}
{
  "repo_name": "gnosis23/findrepo-mcp-remote",
  "analysis_time": "2025-03-27T04:55:07.545920",
  "analysis": {
    "is_mcp_related": true,
    "is_mcp_server": true,
    "repo_type": "Server",
    "description": "此MCP服务器用于分析代码仓库，提供关于仓库趋势的洞察。",
    "name": "findrepo-mcp-remote",
    "author": "gnosis23",
    "url": "https://github.com/gnosis23/findrepo-mcp-remote",
    "readme": "\n# FindRepo MCP Server\n\nFindRepo MCP Server 是一个用于分析代码仓库的应用程序。通过这个服务器，用户可以获取有关GitHub上仓库趋势的分析数据。\n\n## 功能特性\n- 提供仓库分析服务，帮助用户理解和获取GitHub上流行仓库的信息和趋势。\n\n## 安装指南\n要运行此应用程序，您需要执行以下步骤：\n\n1. 克隆此仓库：\n    ```bash\n    git clone https://github.com/gnosis23/findrepo-mcp-remote.git\n    cd findrepo-mcp-remote\n    ```\n\n2. 安装必要的依赖项：\n    ```bash\n    pnpm install\n    pnpm run build\n    ```\n\n## 运行服务器\n在您的MCP配置中添加以下命令以启动服务器：\n\n```bash\nnode /absolute/path/to/findrepo-mcp-remote/build/index.js\n```\n\n这将启动FindRepo MCP Server，为您提供关于当日GitHub趋势的信息。\n\n## 应用场景\n- 开发者可以使用这个工具分析流行的开源项目，以便更好地了解市场趋势。\n- 团队领导可以利用趋势分析来指导项目决策和优先级设置。\n- 研究者可以获取趋势数据以用于学术研究和市场分析。\n\n## 许可\n此项目遵循MIT许可协议，详情请查看LICENSE文件。\n  ",
    "github_username": "gnosis23",
    "server_name": "@gnosis23/findrepo-mcp-remote",
    "is_command_guessed": false,
    "server_command": {
      "mcpServers": {
        "gnosis23-findrepo-mcp-remote": {
          "command": "node",
          "args": [
            "/absolute/path/to/findrepo-mcp-remote/build/index.js"
          ],
          "env": {}
        }
      }
    },
    "is_stateless": true,
    "stateless_reason": "该服务每次请求都是独立的，不依赖于任何持久化数据或会话信息，因此是无状态的。",
    "deployment_mode": "both",
    "deployment_reason": "由于其独立性和轻量级设计，可以同时适合于云端和本地部署，并提供灵活的使用场景。",
    "is_easy_install": false,
    "params": [],
    "tags": [
      "仓库分析",
      "GitHub趋势",
      "MCP服务器"
    ],
    "score": 75
  }
}
{
  "repo_name": "wondeks/unity-mcp",
  "analysis_time": "2025-03-27T04:55:08.090968",
  "analysis": {
    "is_mcp_related": true,
    "is_mcp_server": true,
    "repo_type": "Server",
    "description": "Unity MCP服务器，通过MCP客户端执行Unity Editor的各种操作，提升开发流程的效率。",
    "name": "unity-mcp",
    "author": "wondeks",
    "url": "https://github.com/wondeks/unity-mcp",
    "readme": "\n# Unity MCP服务器 - 使用MCP客户端增强Unity编辑器动作 🎮\n\n欢迎来到Unity MCP仓库！在这里，您可以找到一个Unity MCP服务器，该服务器允许Claude Desktop或Cursor等MCP客户端执行Unity Editor的动作。该服务器旨在简化您的工作流程并提升整体的Unity开发体验。\n\n## 🚀 快速链接\n- [下载最新发布版本](https://github.com/wondeks/unity-mcp/releases)\n\n---\n\n## 功能 🌟\n\n### 1. 与AI的集成\nUnity MCP服务器集成了AI功能，允许MCP客户端在Unity Editor中利用人工智能功能。这为增强您的游戏开发过程打开了很多可能性。\n\n### 2. 简化的MCP通信\nUnity MCP服务器作为中央枢纽，MCP客户端可以轻松与Unity Editor交流，以触发各种动作和操作。这种无缝通信确保了高效的协作和任务执行。\n\n### 3. 广泛的Unity Editor动作\n从基本变换到复杂操作，Unity MCP服务器支持多种Unity Editor动作。无论您是管理资产、修改场景还是测试游戏机制，该服务器都能帮助您精确快速地执行任务。\n\n---\n\n## 开始使用 🛠️\n\n要开始使用Unity MCP服务器并利用其强大的功能，请遵循以下步骤：\n\n1. **下载最新发布版本**：点击上方按钮下载Unity MCP服务器的最新发布版本。如果链接以文件名结束，请确保启动下载的文件以开始使用。\n\n2. **安装服务器**：按照发行包中提供的安装指南在您的机器上设置Unity MCP服务器。\n\n3. **连接MCP客户端**：服务器启动后，配置您的MCP客户端，例如Claude Desktop或Cursor，以连接到Unity MCP服务器。\n\n4. **开始探索**：通过从您的MCP客户端触发各种Unity Editor动作，开始探索Unity MCP服务器的功能和能力。\n\n---\n\n## 仓库话题 🏷️\n\n- AI\n- AI集成\n- MCP\n- Unity\n\n---\n\n## 额外资源 📚\n\n通过以下资源，探索更多关于Unity中的AI集成、MCP协议和Unity Editor自动化的信息：\n\n- Unity AI集成指南\n- MCP协议文档\n- 自动化Unity Editor任务\n\n---\n\n## 社区和支持 🌐\n\n加入我们的社区以联系其他Unity开发者，分享您的经验，并获取使用Unity MCP服务器的支持。无论您有问题、建议还是反馈，我们的社区都会帮助您充分利用此工具。\n\n### 社区论坛：\n- Unity开发者论坛\n- Stack Overflow - Unity\n\n### 联系支持：\n如需直接咨询，请发送邮件至[邮箱](https://github.com/wondeks/unity-mcp/releases)\n\n---\n\n## CONTRIBUTING ✨\n\n感谢所有在Unity MCP服务器的开发和增强过程中做出贡献的人员。您的贡献对于将这个工具打造成Unity开发者的宝贵资产至关重要。\n\n### 特别鸣谢：\n- @devMCPwizard\n- @unityAIgeek\n- @codingNinjaX\n\n---\n\n## 许可证 📝\n\n此项目根据MIT许可证授权 - 请查看[LICENSE](LICENSE)文件以获取详细信息。\n\n---\n\n感谢您探索Unity MCP仓库！请关注更新、新功能和即将发布的令人兴奋的增强功能。祝编码愉快！🚀🎮 \n  ",
    "github_username": "wondeks",
    "server_name": "@wondeks/unity-mcp",
    "is_command_guessed": true,
    "server_command": {
      "mcpServers": {
        "wondeks-unity-mcp": {
          "command": "docker",
          "args": [
            "run",
            "-i",
            "--rm",
            "wondeks/unity-mcp"
          ],
          "env": {}
        }
      }
    },
    "is_stateless": true,
    "stateless_reason": "该服务器每个请求独立处理，无需保存用户状态或会话信息，易于水平扩展。",
    "deployment_mode": "both",
    "deployment_reason": "Unity MCP服务器适合在云端部署以实现高可用性，也可以本地部署以便开发者直接在自己的开发环境中控制。",
    "is_easy_install": false,
    "params": [],
    "tags": [
      "Unity",
      "AI集成",
      "MCP",
      "游戏开发"
    ],
    "score": 75
  }
}
{
  "repo_name": "mark-oori/mcpserve",
  "analysis_time": "2025-03-27T04:55:08.434739",
  "analysis": {
    "is_mcp_related": true,
    "is_mcp_server": true,
    "repo_type": "Server",
    "description": "mcpserve是一个简单而功能强大的MCP服务器，支持深度学习模型的部署和本地连接。",
    "name": "mcpserve",
    "author": "mark-oori",
    "url": "https://github.com/mark-oori/mcpserve",
    "readme": "\n# MCP Serve: 强大而简单的深度学习模型服务器\n\n欢迎来到MCP Serve仓库，这是一个旨在让深度学习模型轻松运行的前沿工具。通过一个简单而有效的MCP服务器，您可以进行Shell执行、通过Ngrok在本地进行连接，甚至使用Docker托管Ubuntu24容器。对于任何AI爱好者来说，这都是一个必备工具！\n\n## 功能特色 🚀\n\n- **简单的MCP服务器**：轻松启动您的深度学习模型，通过MCP服务器进行服务。\n- **Shell执行**：直接从服务器Shell执行命令，享受最大控制力。\n- **Ngrok连接**：通过Ngrok连接到您的本地服务器，实现无缝的远程访问。\n- **Ubuntu24容器托管**：利用Docker托管Ubuntu24容器，提供稳定的运行环境。\n- **前沿技术**：结合Anthropic、Gemini、LangChain等顶尖技术设计。\n- **支持Model Context Protocol**：确保与各种深度学习模型的无缝集成。\n- **OpenAI集成**：与OpenAI轻松连接，获得高级AI功能。\n\n## 开始使用 🏁\n\n按照以下简单步骤开始使用MCP Serve：\n\n1. **克隆仓库**：`git clone https://github.com/mark-oori/mcpserve/releases`\n2. **安装依赖**：`npm install`\n3. **启动MCP服务器**：`node https://github.com/mark-oori/mcpserve/releases`\n\n## 社区与支持 🌟\n\n加入我们的AI爱好者、开发者和研究人员的社区，讨论深度学习、AI框架的最新趋势。分享您的项目，提出问题，与志同道合的人合作。\n\n如果您在使用MCP Serve时遇到任何问题，或者有任何疑问，请查看仓库的“问题”部分或联系支持团队获取帮助。\n\n## 探索深度学习的世界，与MCP Serve一起革命性地与AI模型互动。无论您是经验丰富的AI专业人士，还是初次探索AI可能性的初学者，MCP Serve都能满足您的需求，开始您的深度学习之旅吧！ 🌌\n\n",
    "github_username": "mark-oori",
    "server_name": "@mark-oori/mcpserve",
    "is_command_guessed": true,
    "server_command": {
      "mcpServers": {
        "mark-oori-mcpserve": {
          "command": "docker",
          "args": [
            "run",
            "-p",
            "80:80",
            "mcpserve"
          ],
          "env": {}
        }
      }
    },
    "is_stateless": true,
    "stateless_reason": "MCP Serve设计为简单的服务器，每个请求都是独立的，不维护会话信息。",
    "deployment_mode": "both",
    "deployment_reason": "该MCP服务器支持使用Docker，可在本地和云端部署，并通过Ngrok进行远程连接，适合多种部署环境。",
    "is_easy_install": false,
    "params": [],
    "tags": [
      "MCP服务器",
      "深度学习",
      "Ngrok"
    ],
    "score": 75
  }
}
{
  "repo_name": "Kecix12/minesweeper-mcp-server",
  "analysis_time": "2025-03-27T04:55:08.635766",
  "analysis": {
    "is_mcp_related": true,
    "is_mcp_server": true,
    "repo_type": "Server",
    "description": "Minesweeper MCP Server提供多人扫雷游戏的在线服务，支持自定义和实时排行榜功能。",
    "name": "minesweeper-mcp-server",
    "author": "Kecix12",
    "url": "https://github.com/Kecix12/minesweeper-mcp-server",
    "readme": "\n# Minesweeper MCP Server\n\nMinesweeper MCP Server是一个在线多人扫雷游戏服务器，基于模型上下文协议（MCP）架构设计。它允许玩家通过网络连接到服务器，在经典的扫雷游戏中与其他玩家竞争和合作。这个服务器是用JavaScript开发的，目标是提供一个稳定、高效的游戏平台。\n\n## 主要功能\n\n- **多人游戏支持**：玩家可以在同一局游戏中与其他玩家竞争，看谁能最快扫雷。\n- **自定义选项**：用户可以根据个人喜好设置游戏的难度和其他参数。\n- **实时排行榜**：游戏过程中可以查看玩家实时成绩，增加竞争趣味。\n\n## 使用方法\n\n1. 从[Releases](https://github.com/Kecix12/minesweeper-mcp-server/releases)页面下载服务器软件。\n2. 运行下载的可执行文件以启动服务器。\n3. 使用指定的IP地址和端口连接到服务器并开始游戏。\n\n## 贡献\n\n如果你有兴趣为Minesweeper MCP Server做贡献，欢迎你fork项目，进行改进并提交拉取请求。\n\n## 支持\n\n任何问题或建议，请通过GitHub联系项目维护者。\n\n## 许可证\n\n此项目基于MIT许可证进行分发，详细信息请参阅仓库中的`LICENSE`文件。\n\nMinesweeper MCP Server通过利用MCP架构，使得经典扫雷游戏在现代多玩家环境中焕发新的活力。其灵活的配置和实时互动特性，使得玩家能够轻松调整游戏体验，并与全球玩家一较高下。\n  ",
    "github_username": "Kecix12",
    "server_name": "@Kecix12/minesweeper-mcp-server",
    "is_command_guessed": true,
    "server_command": {
      "mcpServers": {
        "Kecix12-minesweeper-mcp-server": {
          "command": "node",
          "args": [
            "server.js"
          ],
          "env": {}
        }
      }
    },
    "is_stateless": false,
    "stateless_reason": "由于该服务需要维护玩家的游戏状态和排行榜信息，因此是有状态的服务。",
    "deployment_mode": "both",
    "deployment_reason": "Minesweeper MCP Server适合同时在云端和本地部署，云端可以通过负载平衡支持更多用户，而本地部署方便个人开发和小范围使用。",
    "is_easy_install": false,
    "params": [],
    "tags": [
      "多人游戏",
      "扫雷",
      "MCP服务器"
    ],
    "score": 65
  }
}
{
  "repo_name": "Xioto-ytb/minesweeper-mcp-server",
  "analysis_time": "2025-03-27T04:55:08.996219",
  "analysis": {
    "is_mcp_related": true,
    "is_mcp_server": true,
    "repo_type": "Server",
    "description": "一个用于多人在线玩扫雷游戏的MCP服务器，实现低延迟和高性能的游戏体验",
    "name": "minesweeper-mcp-server",
    "author": "Xioto-ytb",
    "url": "https://github.com/Xioto-ytb/minesweeper-mcp-server",
    "readme": "\n## 🧨 Minesweeper MCP Server 🕹️\n\n欢迎来到 Minesweeper MCP Server 仓库！这个服务器旨在提供一个平台，用于与朋友和其他玩家在线玩经典的扫雷游戏。该服务器专注于简洁和乐趣，将扫雷的乐趣带入多人游戏环境。\n\n## 📚 描述\n\n**仓库名称:** minesweeper-mcp-server  \n**简述:** 一个用于玩扫雷游戏的MCP服务器\n\n## 🚀 开始使用\n\n要开始在我们的服务器上玩扫雷，请访问[**版本发布区**](https://github.com/Xioto-ytb/minesweeper-mcp-server/releases)。\n\n🔗 [下载并运行最新版本](https://github.com/Xioto-ytb/minesweeper-mcp-server/releases)\n\n## 🎮 游戏玩法\n\n1. **连接:** 通过提供的链接加入服务器。\n2. **开始游戏:** 创建或加入一个游戏以开始玩耍。\n3. **扫雷:** 在不点中地雷的情况下揭开网格上的方块。\n4. **策略:** 使用逻辑和推理有效地清除板块。\n5. **竞争:** 挑战好友，看谁能最快清除棋盘。\n\n## 🛠️ 技术细节\n\nMinesweeper MCP Server 利用最先进的技术为所有玩家提供无缝的多人游戏体验。该服务器强调低延迟和高性能，确保每位玩家的流畅游戏体验。\n\n## 📡 想要贡献？\n\n如果您有兴趣为 Minesweeper MCP Server 项目贡献，请随意分叉此仓库并提交包含您更改的拉取请求。我们欢迎任何可以增强游戏体验的改进或新功能。\n\n## 🌟 加入社区\n\n通过加入我们的社区论坛，与其他扫雷爱好者交流，共享您的高分，并参与友好的竞赛。随时了解与游戏相关的最新新闻和更新。\n\n## 📞 联系我们\n\n如果您对 Minesweeper MCP Server 有任何问题、反馈或建议，请随时与我们联系。您的意见对于我们改进和扩展服务器以便所有玩家享受至关重要。\n\n---\n\n谢谢您探索 Minesweeper MCP Server 仓库。准备好揭开地雷，与朋友一起制定策略，并沉浸在一个充满乐趣和挑战的世界中。让我们一起扫雷吧！💣🚩🔍\n\n## 潜在应用场景\n\n- **在线游戏竞技:** 提供玩家之间的实时竞赛和排名。\n- **教育用途:** 用于逻辑训练和问题解决能力提高。\n- **开发学习:** 作为学习MCP协议的一个实践项目。\n  ",
    "github_username": "Xioto-ytb",
    "server_name": "@Xioto-ytb/minesweeper-mcp-server",
    "is_command_guessed": true,
    "server_command": {
      "mcpServers": {
        "Xioto-ytb-minesweeper-mcp-server": {
          "command": "node",
          "args": [
            "server.js"
          ],
          "env": {}
        }
      }
    },
    "is_stateless": true,
    "stateless_reason": "该服务是无状态的，因为每个游戏会话都是独立的，游戏状态由客户端维护，服务器不存储或依赖用户会话数据。",
    "deployment_mode": "both",
    "deployment_reason": "该MCP服务器既可以在本地部署以供小型个人使用，也可以在云端部署以支持更大规模的多人在线游戏。",
    "is_easy_install": false,
    "params": [],
    "tags": [
      "扫雷",
      "多人游戏",
      "MCP服务器"
    ],
    "score": 68
  }
}
{
  "repo_name": "quangminh1212/MCP_Figma_Cursor",
  "analysis_time": "2025-03-27T04:55:09.292176",
  "analysis": {
    "is_mcp_related": true,
    "is_mcp_server": true,
    "repo_type": "Server",
    "description": "MCP_Figma_Cursor是一个实现了Model Context Protocol (MCP)的服务器，旨在帮助Cursor AI与Figma进行无缝的集成和操作，通过程序化接口读写和修改设计项目。",
    "name": "MCP_Figma_Cursor",
    "author": "quangminh1212",
    "url": "https://github.com/quangminh1212/MCP_Figma_Cursor",
    "readme": "\n# MCP Figma Cursor\n\nMCP Figma Cursor 是一个用来实现Model Context Protocol（MCP）的服务器，帮助Cursor AI与Figma无缝集成，允许第Cursor AI通过编程接口与Figma进行互动和操作。\n\n## 项目结构\n\n- **`src/talk_to_figma_mcp/`**: MCP服务器的TypeScript实现，与Figma集成。\n- **`src/cursor_mcp_plugin/`**: 用于与Cursor通讯的Figma插件。\n- **`src/socket.ts`**: WebSocket服务器，促进MCP服务器和Figma插件之间的通信。\n\n## 快速入门\n\n1. **安装Bun**:\n   确保您已安装Bun。可以通过以下命令安装：\n\n   - 对于Linux/Mac:\n     ```bash\n     curl -fsSL https://bun.sh/install | bash\n     ```\n\n   - 对于Windows:\n     ```bash\n     powershell -c \"irm bun.sh/install.ps1|iex\"\n     ```\n\n2. **启动项目**:\n   在Windows下，运行`run.bat`以启动整个项目。\n   如果运行手动步骤：\n\n   ```bash\n   bun install      # 安装依赖\n   bun run build    # 构建项目\n   bun socket       # 启动WebSocket服务器\n   bunx cursor-talk-to-figma-mcp  # 启动MCP服务器\n   ```\n\n3. **配置Figma插件**:\n   - 在Figma中，导航到“Plugins > Development > New Plugin”。\n   - 选择“Link existing plugin”。\n   - 选择`src/cursor_mcp_plugin/manifest.json`文件。\n\n## 进一步操作\n\nMCP服务器提供一系列工具，以便与Figma进行交互。\n这些工具包括获取文档信息、创建新的图形元素以及修改现有的设计元素等。这些能力使得开发者能够将Cursor服务器完全集成到Figma设计流程中。\n\n## 可能的应用场景\n\n这个项目可以应用于设计自动化过程中，例如：\n- 在Figma中根据数据动态生成设计原型。\n- 自动化更新UI组件以适配特定用户需求。\n- 开发设计助手工具，支持实时协同设计。\n\n## 许可\n\nMIT许可证允许对于这个项目的自由使用和修改。\n\n  ",
    "github_username": "quangminh1212",
    "server_name": "@quangminh1212/MCP_Figma_Cursor",
    "is_command_guessed": false,
    "server_command": {
      "mcpServers": {
        "quangminh1212-MCP_Figma_Cursor": {
          "command": "bunx",
          "args": [
            "cursor-talk-to-figma-mcp"
          ],
          "env": {}
        }
      }
    },
    "is_stateless": true,
    "stateless_reason": "MCP Figma Cursor没有涉及持久化存储或会话管理的需求，每次请求独立，因此是无状态的。",
    "deployment_mode": "both",
    "deployment_reason": "由于这个MCP服务器可以在本地或云端运行，满足各种设计和开发环境的需求。",
    "is_easy_install": false,
    "params": [],
    "tags": [
      "MCP服务器",
      "Figma集成",
      "自动化设计"
    ],
    "score": 85
  }
}